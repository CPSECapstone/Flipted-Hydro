{"version":3,"sources":["gqlQueries.js","Components/CourseScreen.js","Components/MCQuizScreen.js","Components/FillBlank.js","Components/FreeResponse.js","Components/MultiSelect.js","App.js","reportWebVitals.js","index.js"],"names":["GET_ALL_COURSES","gql","ADD_COURSE","DELETE_COURSE","CourseScreen","useQuery","loading","error","data","refetch","useState","name","setName","useMutation","addCourse","deleteCourse","onSubmit","event","a","preventDefault","variables","then","response","alert","err","console","handleDeleteCourse","log","target","attributes","courseid","id","value","className","courses","map","onClick","displayCourseList","type","onChange","MCQuizScreen","setAnswer","handleChange","e","for","FillBlank","myname","FreeResponse","MultiSelect","Amplify","configure","Auth","identityPoolId","region","userPoolId","userPoolWebClientId","oauth","domain","scope","redirectSignIn","redirectSignOut","responseType","App","credentials","setCredentials","useEffect","Hub","listen","payload","signInUserSession","currentSession","session","catch","signOut","federatedSignIn","client","ApolloClient","uri","process","cache","InMemoryCache","headers","authorization","getAccessToken","getJwtToken","component","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wSAEaA,EAAkBC,cAAH,oFASfC,EAAaD,cAAH,sIAUVE,EAAgBF,cAAH,kH,OCyDXG,MAvEf,WAAyB,IAAD,EAEmBC,mBAASL,GAA1CM,EAFc,EAEdA,QAASC,EAFK,EAELA,MAAOC,EAFF,EAEEA,KAAMC,EAFR,EAEQA,QAFR,EAGEC,mBAAS,IAHX,mBAGfC,EAHe,KAGTC,EAHS,OAIFC,sBAAYX,GAAzBY,EAJe,sBAKCD,sBAAYV,GAA5BY,EALe,oBAOhBC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACfD,EAAME,iBACN,IACEL,EAAU,CAAEM,UAAW,CAAET,KAAMA,KAAUU,MAAK,SAAAC,GAC5CV,EAAQ,IACRH,IACAc,MAAM,qBAER,MAAOC,GACPC,QAAQlB,MAAMiB,GACdD,MAAM,UAVO,2CAAH,sDAcRG,EAAqB,SAACT,GAC1BQ,QAAQE,IAAIV,EAAMW,OAAOC,WAAWC,UACpC,IACEf,EAAa,CAAEK,UAAW,CAAEW,GAAId,EAAMW,OAAOC,WAAWC,SAASE,SAAWX,MAAK,SAAAC,GAC/Eb,IACAc,MAAM,qBAER,MAAOC,GACPC,QAAQlB,MAAMiB,GACdD,MAAM,YAqBV,OACE,gCACE,yCACA,sBAAKU,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SACE,6BAtBkB,SAAC3B,EAASC,EAAOC,GAEzC,OAAIF,EAAgB,2CAChBC,GACFkB,QAAQE,IAAIpB,GACL,0CAGFC,EAAK0B,QAAQC,KAAI,gBAAGJ,EAAH,EAAGA,GAAIpB,EAAP,EAAOA,KAAP,OACtB,qBAAcsB,UAAU,aAAxB,SACE,+BACGtB,EAAK,wBAAQsB,UAAU,eAAeH,SAAUC,EAAIK,QAASV,EAAxD,wBAFAK,MAaDM,CAAkB/B,EAASC,EAAOC,OAEzC,qBAAKyB,UAAU,SAAf,SACE,uBAAMjB,SAAUA,EAAhB,UACE,4CACA,uBAAOiB,UAAU,cAAjB,qBACA,uBAAOK,KAAK,OAAOP,GAAG,QAAQpB,KAAK,QAAQqB,MAAOrB,EAAM4B,SAAU,SAAAtB,GAAK,OAAIL,EAAQK,EAAMW,OAAOI,UAChG,wBAAQM,KAAK,SAASL,UAAU,eAAhC,gCCrBGO,MAzCf,WAAyB,IAAD,EACG9B,mBAAS,IADZ,mBACR+B,GADQ,WAGhBC,EAAa,SAACC,GAChBF,EAAWE,EAAEf,OAAOI,QAGjBhB,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAChBK,MAAM,cADU,2CAAH,sDAId,OACE,gCAEA,6DAEG,iCACI,uBAAOe,KAAK,QAAQN,MAAM,KAAKD,GAAG,KAChCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,iBAED,uBAAON,KAAK,QAAQN,MAAM,KAAKD,GAAG,KAChCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,gBAEA,uBAAON,KAAK,QAAQN,MAAM,KAAKD,GAAG,KAChCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,mBAEA,uBAAON,KAAK,QAAQN,MAAM,KAAKD,GAAG,KAChCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,6BAGH,8BACI,wBAAQR,QAAWpB,EAAnB,0BCbI6B,MA3BhB,WAAqB,IAYDrC,EAZC,EAEME,mBAAS,IAFf,mBAELE,GAFK,WAGXI,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAChBK,MAAM,cADU,2CAAH,sDAad,OACE,qBAAKU,UAAU,SAAf,SACA,uBAAMjB,SAAUA,EAAhB,UACE,mGACE,8BARUR,EALA,CACf,CAACsC,OAAQ,MACT,CAACA,OAAQ,MACT,CAACA,OAAQ,OAGHtC,EAAK2B,KAAI,gBAAExB,EAAF,EAAEA,KAAF,OAAa,uBAAO2B,KAAK,OAAOP,GAAG,QAAQpB,KAAK,QAAQqB,MAAOrB,EAAM4B,SAAU,SAAAtB,GAAK,OAAIL,EAAQK,EAAMW,OAAOI,gBAQzH,wBAAQM,KAAK,SAASL,UAAU,eAAhC,0BCFQc,MAnBhB,WAAwB,MAEGrC,mBAAS,IAFZ,mBAEdC,EAFc,KAERC,EAFQ,KAIfI,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACfK,MAAM,cADS,2CAAH,sDAIb,OACE,qBAAKU,UAAU,SAAf,SACA,uBAAMjB,SAAUA,EAAhB,UACG,+DACG,uBAAOsB,KAAK,OAAOP,GAAG,QAAQpB,KAAK,QAAQqB,MAAOrB,EAAM4B,SAAU,SAAAtB,GAAK,OAAIL,EAAQK,EAAMW,OAAOI,UACjG,wBAAQM,KAAK,SAASL,UAAU,eAAhC,0BCiCIe,MAzCf,WAAwB,IAAD,EACItC,mBAAS,IADb,mBACP+B,GADO,WAGfC,EAAa,SAACC,GAChBF,EAAWE,EAAEf,OAAOI,QAGjBhB,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAChBK,MAAM,cADU,2CAAH,sDAId,OACE,gCAEA,6DAEG,iCACI,uBAAOe,KAAK,WAAWN,MAAM,KAAKD,GAAG,KACnCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,iBAED,uBAAON,KAAK,WAAWN,MAAM,KAAKD,GAAG,KACnCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,gBAEA,uBAAON,KAAK,WAAWN,MAAM,KAAKD,GAAG,KACnCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,mBAEA,uBAAON,KAAK,WAAWN,MAAM,KAAKD,GAAG,KACnCQ,SAAUG,EAAc/B,KAAK,WAC/B,uBAAOiC,IAAI,KAAX,6BAGH,8BACI,wBAAQR,QAAWpB,EAAnB,0BChCZiC,UAAQC,UAAU,CAChBC,KAAM,CACFC,eAAgB,iDAChBC,OAAQ,YACRC,WAAY,sBACZC,oBAAqB,6BACrBC,MAAO,CACLC,OAAQ,oDACRC,MAAO,CAAC,QAAS,QAAS,UAAW,SAAU,iCAC/CC,eAAgB,yBAChBC,gBAAiB,yBACjBC,aAAc,YAgFPC,MA3Ef,WAAgB,IAAD,EAEyBpD,mBAAS,MAFlC,mBAENqD,EAFM,KAEOC,EAFP,KA2Cb,OAzBAC,qBAAU,WACRC,IAAIC,OAAO,QAAQ,YAAmC,IAAD,IAA/BC,QAAWnD,EAAoB,EAApBA,MAAOT,EAAa,EAAbA,KACtC,OAAQS,GACN,IAAK,SACHQ,QAAQE,IAAI,wBACZ,MACF,IAAK,kBACHqC,EAAexD,EAAK6D,mBAEpB,MACF,IAAK,UACHL,EAAe,MACf,MACF,IAAK,iBACHvC,QAAQE,IAAI,oBACZ,MACF,IAAK,0BACHF,QAAQE,IAAI,kBAAmBnB,OA9B9B2C,IAAKmB,iBACXjD,MAAK,SAAAkD,GACJP,EAAeO,MAEhBC,OAAM,kBAAM/C,QAAQE,IAAI,sBAgCxB,IAGD,gCACGoC,EACC,wBAAQ3B,QAAS,kBAAMe,IAAKsB,WAA5B,sBAEA,wBAAQrC,QAAS,kBAAMe,IAAKuB,mBAA5B,qBAGc,MAAfX,EAAqB,sBACtB,eAAC,iBAAD,CAAgBY,OACd,IAAIC,eAAa,CACfC,IAAKC,qEACLC,MAAO,IAAIC,gBACXC,QAAS,CACPC,cAAenB,EAAYoB,iBAAiBC,iBALlD,UAOE,mBAAGnD,UAAU,QAAb,uBACA,8BACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoD,UAAajF,EAAckF,OAAK,EAACC,KAAO,MAC/C,cAAC,IAAD,CAAOF,UAAa7C,EAAc8C,OAAK,EAACC,KAAO,kBAC/C,cAAC,IAAD,CAAOF,UAAaxC,EAAWyC,OAAK,EAACC,KAAO,eAC5C,cAAC,IAAD,CAAOF,UAAatC,EAAcuC,OAAK,EAACC,KAAO,kBAC/C,cAAC,IAAD,CAAOF,UAAarC,EAAasC,OAAK,EAACC,KAAO,6BCjFzCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrE,MAAK,YAAkD,IAA/CsE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCAdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e68cdc64.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const GET_ALL_COURSES = gql`\n  {\n    courses {\n      id  \n      name\n    }\n  }\n`;\n\nexport const ADD_COURSE = gql`\n  mutation AddCourse($name: String!){\n    addCourse(\n      name: $name\n    ){\n      name\n    }\n  }\n`;\n\nexport const DELETE_COURSE = gql`\n  mutation DeleteCourse($id: String!){\n    deleteCourse(\n      id: $id\n    )\n  }\n`;","/* eslint-disable linebreak-style */\nimport React, { useState } from 'react';\nimport './CourseScreen.css';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ALL_COURSES, ADD_COURSE, DELETE_COURSE } from '../gqlQueries.js'\n\n\nfunction CourseScreen() {\n\n  const { loading, error, data, refetch} = useQuery(GET_ALL_COURSES);\n  const [name, setName] = useState('');\n  const [addCourse] = useMutation(ADD_COURSE);\n  const [deleteCourse] = useMutation(DELETE_COURSE);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try{\n      addCourse({ variables: { name: name } }).then(response => {\n        setName('');\n        refetch();\n        alert('Course Created');\n      });\n    } catch (err) {\n      console.error(err);\n      alert('Error!');\n    }\n  }\n\n  const handleDeleteCourse = (event) => {\n    console.log(event.target.attributes.courseid);\n    try{\n      deleteCourse({ variables: { id: event.target.attributes.courseid.value } }).then(response => {\n        refetch();\n        alert('Course Deleted');\n      });\n    } catch (err) {\n      console.error(err);\n      alert('Error!');\n    }\n  }\n  \n  const displayCourseList = (loading, error, data) => {\n  \n    if (loading) return <p>Loading...</p>;\n    if (error) {\n      console.log(error);\n      return <p>Error :(</p>;\n    }\n    //console.log(data);\n    return data.courses.map(({ id, name }) => (\n      <div key={id} className='courseItem'>\n        <ul>\n          {name}<button className=\"deleteButton\" courseid={id} onClick={handleDeleteCourse}>Delete</button>\n        </ul>\n      </div>\n    ));\n  }\n\n  return (\n    <div> \n      <h1>Courses</h1>\n      <div className=\"row\">\n        <div className=\"column\">\n          <ul>{displayCourseList(loading, error, data)}</ul>\n        </div> \n        <div className=\"column\">\n          <form onSubmit={onSubmit}>\n            <h3>Add Course</h3>\n            <label className=\"courseInput\"> Name: </label>\n            <input type=\"text\" id=\"cname\" name=\"cname\" value={name} onChange={event => setName(event.target.value)}/>\n            <button type=\"submit\" className=\"submitbutton\">Submit</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CourseScreen;","import React, { useState } from 'react';\n//import \"./MCQuizScreen.css\";\n//import { useQuery, useMutation  } from '@apollo/client';\n//import { GET_QUIZ_QUESTIONS, SUBMIT_QUIZ } from '../gqlQueries.js';\n //get Questions\n //submit button\n //selection buttons\n\nfunction MCQuizScreen() {\n  const [answer,setAnswer]=useState('');\n\n  const handleChange=(e)=>{\n      setAnswer( e.target.value);\n   }\n\n   const onSubmit = async (event) => {\n    alert(\"Submitted!\");\n  }\n\n   return (\n     <div>\n     \n     <p>What is the meaning of life?</p>\n\n        <form>\n            <input type=\"radio\" value=\"A1\" id=\"A1\"\n              onChange={handleChange} name=\"answer\" />\n            <label for=\"A1\">Yes</label>\n\n           <input type=\"radio\" value=\"A2\" id=\"A2\"\n             onChange={handleChange} name=\"answer\"/>\n           <label for=\"A2\">No</label>\n\n           <input type=\"radio\" value=\"A3\" id=\"A3\"\n             onChange={handleChange} name=\"answer\"/>\n           <label for=\"A3\">Maybe</label>\n\n           <input type=\"radio\" value=\"A4\" id=\"A4\"\n             onChange={handleChange} name=\"answer\"/>\n           <label for=\"A4\">I don't know</label>\n        </form>\n        \n        <div>\n            <button onClick = {onSubmit}>Submit</button>\n        </div>\n     </div>\n   );\n}\n\nexport default MCQuizScreen;","import React, { useState } from 'react';\n//var List = require(\"collections/list\");\n\nfunction FillBlank() {\n   //const [answer]=useState('');\n   const [name, setName] = useState('');\n    const onSubmit = async (event) => {\n     alert(\"Submitted!\");\n   }\n\n   const mockdata = [\n     {myname: 'B1'},\n     {myname: 'B1'},\n     {myname: 'B1'}];\n\n   const textMap = (data) => {\n    return data.map(({name}) => (<input type=\"text\" id=\"cname\" name=\"cname\" value={name} onChange={event => setName(event.target.value)}/>));\n   }\n \n    return (\n      <div className=\"column\">\n      <form onSubmit={onSubmit}>\n        <h3>There are ___ Corners and ___ sides on a triangle. This is a ___.</h3>\n          <ul>{textMap(mockdata)}</ul>\n        <button type=\"submit\" className=\"submitbutton\">Submit</button>\n      </form>\n    </div>\n    );\n }\n \n export default FillBlank;","import React, { useState } from 'react';\n//var List = require(\"collections/list\");\n\nfunction FreeResponse() {\n   //const [answer]=useState('');\n   const [name, setName] = useState('');\n    \n   const onSubmit = async (event) => {\n     alert(\"Submitted!\");\n   }\n \n    return (\n      <div className=\"column\">\n      <form onSubmit={onSubmit}>\n         <h3>Write an essay on Shakespeare</h3>\n            <input type=\"text\" id=\"cname\" name=\"cname\" value={name} onChange={event => setName(event.target.value)}/>\n           <button type=\"submit\" className=\"submitbutton\">Submit</button>\n      </form>\n      </div>\n    );\n }\n \n export default FreeResponse;","import React, { useState } from 'react';\n//import \"./MCQuizScreen.css\";\n//import { useQuery, useMutation  } from '@apollo/client';\n//import { GET_QUIZ_QUESTIONS, SUBMIT_QUIZ } from '../gqlQueries.js';\n//get Questions\n//submit button\n//selection buttons\n\nfunction MultiSelect() {\n  const [answer,setAnswer]=useState('');\n\n  const handleChange=(e)=>{\n      setAnswer( e.target.value);\n   }\n\n   const onSubmit = async (event) => {\n    alert(\"Submitted!\");\n  }\n\n   return (\n     <div>\n     \n     <p>What is the meaning of life?</p>\n\n        <form>\n            <input type=\"checkbox\" value=\"A1\" id=\"A1\"\n              onChange={handleChange} name=\"answer\" />\n            <label for=\"A1\">Yes</label>\n\n           <input type=\"checkbox\" value=\"A2\" id=\"A2\"\n             onChange={handleChange} name=\"answer\"/>\n           <label for=\"A2\">No</label>\n\n           <input type=\"checkbox\" value=\"A3\" id=\"A3\"\n             onChange={handleChange} name=\"answer\"/>\n           <label for=\"A3\">Maybe</label>\n\n           <input type=\"checkbox\" value=\"A4\" id=\"A4\"\n             onChange={handleChange} name=\"answer\"/>\n           <label for=\"A4\">I don't know</label>\n        </form>\n        \n        <div>\n            <button onClick = {onSubmit}>Submit</button>\n        </div>\n     </div>\n   );\n}\n\nexport default MultiSelect;","import React, { useEffect, useState } from 'react';\nimport Amplify, { Auth, Hub } from 'aws-amplify';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport {Route, Switch} from 'react-router-dom';\nimport CourseScreen from './Components/CourseScreen.js';\nimport MCQuizScreen from './Components/MCQuizScreen.js';\nimport FillBlank from './Components/FillBlank.js';\nimport FreeResponse from './Components/FreeResponse.js';\nimport MultiSelect from './Components/MultiSelect.js';\n\nAmplify.configure({\n  Auth: {\n      identityPoolId: 'us-east-1:07057d76-612a-4045-8522-f38a759cf216',\n      region: 'us-east-1',\n      userPoolId: 'us-east-1_POfbbYTKF',\n      userPoolWebClientId: '24sdf1brebo58s89ja0b63c51d',\n      oauth: {\n        domain: 'flipted-ios-test.auth.us-east-1.amazoncognito.com',\n        scope: ['phone', 'email', 'profile', 'openid', 'aws.cognito.signin.user.admin'],\n        redirectSignIn: 'http://localhost:3000/',\n        redirectSignOut: 'http://localhost:3000/',\n        responseType: 'token'\n      }\n  }\n});\n\nfunction App() {\n\n  const [credentials, setCredentials] = useState(null);\n\n  const refreshCredentials = () => {\n    return Auth.currentSession()\n    .then(session => {\n      setCredentials(session);\n    })\n    .catch(() => console.log('not signed in'));\n  }\n\n  const changeScreen = () => {\n    // TODO\n    // Fill out a code to change screen from login to next page\n    // Pass credentials.getAccessToken().getJwtToken() as a prop to the next screen\n  }\n\n  useEffect(() => {\n    Hub.listen('auth', ({ payload: { event, data } }) => {\n      switch (event) {\n        case 'signIn':\n          console.log('Successfull Sign In.');\n          break;\n        case 'cognitoHostedUI':\n          setCredentials(data.signInUserSession);\n          changeScreen();\n          break;\n        case 'signOut':\n          setCredentials(null);\n          break;\n        case 'signIn_failure':\n          console.log('Sign In Failure.');\n          break;\n        case 'cognitoHostedUI_failure':\n          console.log('Sign in failure', data);\n          break;\n      }\n    });\n\n    refreshCredentials();\n  }, []);\n\n  return (\n    <div>\n      {credentials ? (\n        <button onClick={() => Auth.signOut()}>Sign Out</button>\n      ) : (\n        <button onClick={() => Auth.federatedSignIn()}>Sign In</button>\n      )}\n\n      {credentials == null? <p></p> :\n      <ApolloProvider client={\n        new ApolloClient({\n          uri: process.env.REACT_APP_PROD_URI,\n          cache: new InMemoryCache(),\n          headers: {\n            authorization: credentials.getAccessToken().getJwtToken(),\n          }})}>\n        <p className=\"title\">Flipt(Ed)</p>\n        <div>\n        <Switch>\n          <Route component = {CourseScreen} exact path = '/'/>\n          <Route component = {MCQuizScreen} exact path = '/mcquizscreen'/>\n          <Route component = {FillBlank} exact path = '/FillBlank'/>\n          <Route component = {FreeResponse} exact path = '/FreeResponse'/>\n          <Route component = {MultiSelect} exact path = '/MultiSelect'/>\n        </Switch>\n        </div>\n      </ApolloProvider>}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}